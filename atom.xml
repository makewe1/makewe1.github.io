<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Makeway</title>
  
  
  <link href="https://makewe1.github.io/atom.xml" rel="self"/>
  
  <link href="https://makewe1.github.io/"/>
  <updated>2025-09-26T00:21:28.445Z</updated>
  <id>https://makewe1.github.io/</id>
  
  <author>
    <name>makewe1</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lec02 – MemTable</title>
    <link href="https://makewe1.github.io/2025/09/22/AstraKV/Lec02-MemTable/"/>
    <id>https://makewe1.github.io/2025/09/22/AstraKV/Lec02-MemTable/</id>
    <published>2025-09-22T05:05:00.000Z</published>
    <updated>2025-09-26T00:21:28.445Z</updated>
    
    <content type="html"><![CDATA[<h1>1 MemTable Implementation</h1><h2 id="1-1-Principle-Analysis">1.1 Principle Analysis</h2><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">                 ┌───────────────┐</span><br><span class="line">                 │    Client     │</span><br><span class="line">                 └───────┬───────┘</span><br><span class="line">                         │</span><br><span class="line">               r1. Write to active SkipList</span><br><span class="line">                         │</span><br><span class="line">                         ▼</span><br><span class="line">               ┌───────────────────┐</span><br><span class="line">               │      MemTable     │</span><br><span class="line">               │                   │</span><br><span class="line">               │   Active SkipList │  &lt;─── current writes go here</span><br><span class="line">               │                   │</span><br><span class="line">               │   Frozen SkipList │  &lt;─── once full, turned read-only</span><br><span class="line">               │   Frozen SkipList │</span><br><span class="line">               │   Frozen SkipList │</span><br><span class="line">               └───────────────────┘</span><br><span class="line">                  ▲             ▲</span><br><span class="line">                  │             │</span><br><span class="line">r1. Query active SkipList      r2. Query frozen SkipList</span><br></pre></td></tr></tbody></table></figure><h3 id="Explanation">Explanation</h3><p><strong>Active SkipList</strong></p><ul><li><p>The in-memory structure currently accepting writes.</p></li><li><p>All new inserts/updates go here.</p></li><li><p>Reads first check this list.</p></li></ul><p><strong>Frozen SkipLists</strong></p><ul><li><p>When the active SkipList fills up, it is frozen (read-only).</p></li><li><p>Eventually, these frozen skip lists are flushed to disk as SSTables.</p></li><li><p>Reads must also check these until they are flushed.</p></li></ul><p><strong>Client flow</strong></p><ul><li><p>r1 (Write) → client writes into the active skip list.</p></li><li><p>r1 (Read) → reads first check active skip list.</p></li><li><p>r2 (Read) → if not found, reads also check frozen skip lists.</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1 MemTable Implementation&lt;/h1&gt;
&lt;h2 id=&quot;1-1-Principle-Analysis&quot;&gt;1.1 Principle Analysis&lt;/h2&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tbody&gt;</summary>
      
    
    
    
    <category term="AstraKV" scheme="https://makewe1.github.io/categories/AstraKV/"/>
    
    
    <category term="C++" scheme="https://makewe1.github.io/tags/C/"/>
    
    <category term="Database" scheme="https://makewe1.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>C++ Note 1</title>
    <link href="https://makewe1.github.io/2025/09/16/C++/Note_1/"/>
    <id>https://makewe1.github.io/2025/09/16/C++/Note_1/</id>
    <published>2025-09-16T11:00:00.000Z</published>
    <updated>2025-09-23T00:01:10.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Miscellaneous">Miscellaneous</h2><h4 id="1">1</h4><p>When you want to share constants (like <code>SKIPLIST_P</code>) across your project, you normally put them in a header file inside your include/ directory. For example:</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>/</span><br><span class="line"> └── consts.h</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>And inside consts.h you can write:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SKIPLIST_P 0.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Old style (C / macros)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SKIPLIST_P 0.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Modern C++ style (preferred)</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">double</span> SKIPLIST_P = <span class="number">0.5</span>;</span><br></pre></td></tr></tbody></table></figure><p><code>#define</code> is a preprocessor macro. Before compilation, the preprocessor literally replaces every <code>SKIPLIST_P</code> with <code>0.5</code>. That’s why it doesn’t need a type.</p><h4 id="Scope-Resolution-Operator">Scope Resolution Operator (<code>::</code>)</h4><p>The <code>::</code> operator lets you <strong>explicitly tell the compiler which scope to use</strong>.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scope_name::identifier</span><br></pre></td></tr></tbody></table></figure><p>A <strong>scope</strong> is a region of code where a name (variable, function, class, etc.) is visible.<br>For example:</p><ul><li>The <strong>global scope</strong> is outside all functions/classes.</li><li>Each <strong>function</strong> has its own local scope.</li><li>Each <strong>class</strong> has its own member scope.</li><li>Each <strong>namespace</strong> has its own scope.</li></ul><h2 id="Structure-of-a-Lambda-with-std-function">Structure of a Lambda with <code>std::function</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function&lt;ReturnType(ParamType1, ParamType2, ...)&gt; name =</span><br><span class="line">    [&amp;](ParamType1 p1, ParamType2 p2, ...) -&gt; ReturnType {</span><br><span class="line">        <span class="comment">// function body</span></span><br><span class="line">    };</span><br></pre></td></tr></tbody></table></figure><h3 id="Meaning-of-Each-Part">Meaning of Each Part</h3><table><thead><tr><th>Part</th><th>What it means</th></tr></thead><tbody><tr><td><code>function&lt;ReturnType(ParamTypes...)&gt;</code></td><td>Declares a variable that can hold <strong>any callable</strong> with those parameter and return types</td></tr><tr><td><code>name</code></td><td>The variable name for your lambda — you can call it like a normal function later</td></tr><tr><td><code>&amp;</code> in <code>[&amp;]</code></td><td><strong>Capture all outer variables by reference</strong>, so the lambda can access them</td></tr><tr><td><code>(ParamType p1, ParamType p2, ...)</code></td><td>The <strong>parameter list</strong> with variable names</td></tr><tr><td><code>-&gt; ReturnType</code></td><td>The <strong>return type</strong> of the lambda (needed when doing recursion)</td></tr><tr><td><code>{ ... }</code></td><td>The <strong>function body</strong> — code that runs when you call the lambda</td></tr></tbody></table><hr><h2 id="Understanding-C-Constructors">Understanding C++ Constructors</h2><p>A constructor is a special function that runs when we create an object.<br>It has <strong>three main parts</strong>:</p><h3 id="Parameters-the-input">Parameters (the input)</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MyClass</span>(<span class="type">int</span> value, <span class="type">bool</span> f)</span><br></pre></td></tr></tbody></table></figure><p>These are the inputs we pass when creating the object.</p><p>Example:</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MyClass <span class="title">obj</span><span class="params">(<span class="number">42</span>, <span class="literal">true</span>)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Here, value = 42 and f = true.</p><h3 id="Member-initializer-list-after-the">Member initializer list after the :</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: <span class="built_in">x</span>(value), <span class="built_in">flag</span>(f)</span><br></pre></td></tr></tbody></table></figure><p>This part <strong>initializes</strong> the member variables directly with the inputs.<br>It is more efficient than assignment inside <code>{}</code> because the members are built with these values immediately.</p><p>Think of it like:</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>member</mtext><mo>=</mo><mtext>input</mtext></mrow><annotation encoding="application/x-tex"> \text{member} = \text{input} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord text"><span class="mord">member</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8623em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">input</span></span></span></span></span></span><h3 id="Constructor-body">Constructor body { }</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">{</span><br><span class="line"><span class="comment">// extra code runs here after members are initialized</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>This is where you put extra logic, loops, or setup code.<br>It runs after the member variables have been set.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Miscellaneous&quot;&gt;Miscellaneous&lt;/h2&gt;
&lt;h4 id=&quot;1&quot;&gt;1&lt;/h4&gt;
&lt;p&gt;When you want to share constants (like &lt;code&gt;SKIPLIST_P&lt;/code&gt;) across your p</summary>
      
    
    
    
    <category term="C++" scheme="https://makewe1.github.io/categories/C/"/>
    
    
    <category term="C++" scheme="https://makewe1.github.io/tags/C/"/>
    
    <category term="Note" scheme="https://makewe1.github.io/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>Lec01 – Introduction to LSM Trees and Skip List Implementation</title>
    <link href="https://makewe1.github.io/2025/09/14/AstraKV/Lec01%20%E2%80%93%20Introduction%20to%20LSM%20Trees%20and%20Skip%20List%20Implementation/"/>
    <id>https://makewe1.github.io/2025/09/14/AstraKV/Lec01%20%E2%80%93%20Introduction%20to%20LSM%20Trees%20and%20Skip%20List%20Implementation/</id>
    <published>2025-09-14T11:50:00.000Z</published>
    <updated>2025-09-22T05:17:48.954Z</updated>
    
    <content type="html"><![CDATA[<h1>1 LSM Tree Overall Architecture</h1><h2 id="1-1-Basic-Concepts">1.1 Basic Concepts</h2><h3 id="Log-Structured-Merge-Tree-LSM-tree">Log-Structured Merge Tree (LSM-tree)</h3><p>An <strong>LSM-tree</strong> is a way to store <strong>key–value data</strong> that makes <strong>writing very fast</strong> by:</p><ul><li><strong>First writing</strong> new data into memory (a small sorted table)</li><li><strong>Later saving</strong> it to disk as sorted files (<strong>SSTables</strong>)</li><li><strong>Merging</strong> old files in the background to keep them organized</li></ul><h4 id="Write-Ahead-Log-WAL">Write-Ahead Log (WAL)</h4><p><strong>WAL (Write-Ahead Log)</strong> is a <strong>log file</strong> used to protect data.</p><ul><li>Before changing real data, <strong>write the change to the log</strong></li><li>If the system crashes, you can <strong>replay the log to recover</strong></li></ul><h5 id="Reason">Reason</h5><p>Imagine your database is like a <strong>notebook</strong>:</p><ul><li>If the computer <strong>crashes mid-write</strong>, you could <strong>lose or corrupt data</strong></li></ul><h5 id="How-WAL-Helps">How WAL Helps</h5><ol><li><strong>First write</strong> the change to the <strong>WAL</strong> (like a safety diary(disk))</li><li><strong>Then apply</strong> the change to the real data (e.g. MemTable)</li><li>If a crash happens, on restart you can <strong>replay the WAL</strong> to recover lost changes</li></ol><p>This ensures <strong>data durability and crash recovery</strong></p><h4 id="LSM-Tree-Storage-Flow-with-WAL">LSM-Tree Storage Flow (with WAL)</h4><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">         (new write)</span><br><span class="line">              │</span><br><span class="line">  +-------------------------+</span><br><span class="line">  |  Write-Ahead Log (WAL)  |  📝</span><br><span class="line">  |  - append-only on disk  |</span><br><span class="line">  +-------------------------+</span><br><span class="line">              │</span><br><span class="line">   (also write to RAM at same time)</span><br><span class="line">              │</span><br><span class="line">  +-------------------------+</span><br><span class="line">  |        MemTable         |  ⚡</span><br><span class="line">  |  - in-memory (skip list)|</span><br><span class="line">  |  - sorted               |</span><br><span class="line">  +-------------------------+</span><br><span class="line">              │ (when full, flush)</span><br><span class="line">              ▼</span><br><span class="line">  +-------------------------+</span><br><span class="line">  |   SSTable (Level 0)     |  💾</span><br><span class="line">  |  - on disk, immutable   |</span><br><span class="line">  |  - sorted inside        |</span><br><span class="line">  +-------------------------+</span><br><span class="line">              │</span><br><span class="line">              ▼</span><br><span class="line">  +---------------------------------+</span><br><span class="line">  |       Compaction process        |  ⚙️</span><br><span class="line">  |  - merges overlapping SSTables  |</span><br><span class="line">  |  - produces bigger sorted files |</span><br><span class="line">  +---------------------------------+</span><br><span class="line">              │</span><br><span class="line">              ▼</span><br><span class="line">+---------+       +---------+       +---------+</span><br><span class="line">|  L1     |  → → → |  L2     |  → → → |  L3...  |</span><br><span class="line">+---------+       +---------+       +---------+</span><br><span class="line">(on-disk, large, non-overlapping ranges)</span><br></pre></td></tr></tbody></table></figure><p><strong>step by step process</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Step 1: New writes go into WAL + MemTable</span><br><span class="line">----------------------------------------</span><br><span class="line">Client writes:</span><br><span class="line">   put("a", 1)</span><br><span class="line">   put("b", 2)</span><br><span class="line">   put("c", 3)</span><br><span class="line"></span><br><span class="line">WAL (disk):             MemTable (in memory, skip list):</span><br><span class="line"> [a,1], [b,2], [c,3]     a→1, b→2, c→3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Step 2: MemTable flush → SSTable in L0</span><br><span class="line">--------------------------------------</span><br><span class="line">When MemTable is full, it’s flushed to disk as SSTable_1:</span><br><span class="line"></span><br><span class="line">Level 0 (L0):</span><br><span class="line"> ┌───────────────┐</span><br><span class="line"> │ SSTable_1     │  --&gt; sorted: [a,1], [b,2], [c,3]</span><br><span class="line"> └───────────────┘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Step 3: More writes come in</span><br><span class="line">----------------------------</span><br><span class="line">Client writes:</span><br><span class="line">   put("b", 20)   # update b</span><br><span class="line">   put("d", 4)</span><br><span class="line"></span><br><span class="line">WAL: append [b,20], [d,4]</span><br><span class="line">MemTable: b→20, d→4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Step 4: Flush new MemTable → another L0 SSTable</span><br><span class="line">------------------------------------------------</span><br><span class="line">Level 0 (L0):</span><br><span class="line"> ┌───────────────┐</span><br><span class="line"> │ SSTable_1     │  --&gt; [a,1], [b,2], [c,3]</span><br><span class="line"> ├───────────────┤</span><br><span class="line"> │ SSTable_2     │  --&gt; [b,20], [d,4]</span><br><span class="line"> └───────────────┘</span><br><span class="line"></span><br><span class="line">⚠ Keys overlap (both tables contain "b").</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Step 5: Compaction L0 → L1</span><br><span class="line">---------------------------</span><br><span class="line">Pick overlapping SSTables (SSTable_1 + SSTable_2), merge-sort:</span><br><span class="line"></span><br><span class="line">Merged sequence:</span><br><span class="line">   [a,1], [b,2], [c,3], [b,20], [d,4]</span><br><span class="line"></span><br><span class="line">Keep latest values:</span><br><span class="line">   a→1, b→20, c→3, d→4</span><br><span class="line"></span><br><span class="line">Result → New SSTable in L1:</span><br><span class="line">Level 1 (L1):</span><br><span class="line"> ┌───────────────┐</span><br><span class="line"> │ SSTable_merged│  --&gt; [a,1], [b,20], [c,3], [d,4]</span><br><span class="line"> └───────────────┘</span><br><span class="line"></span><br><span class="line">Old SSTable_1 and SSTable_2 are deleted after compaction.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Step 6: Reads after compaction</span><br><span class="line">-------------------------------</span><br><span class="line">- get("b") → finds only "b→20" (newest value).</span><br><span class="line">- Old value "b→2" is discarded permanently.</span><br></pre></td></tr></tbody></table></figure><h4 id="How-Delete-Works-in-an-LSM-Tree">How Delete Works in an LSM-Tree</h4><p><strong>Put a Tombstone</strong></p><ul><li>A <strong>delete</strong> writes a special <strong>tombstone record</strong> (<code>key = &lt;tombstone&gt;</code>)</li><li>It <strong>does not remove</strong> old data immediately</li></ul><p><strong>Read Path</strong></p><ol><li><strong>Check MemTable first</strong></li><li>If a <strong>tombstone is found</strong>, ignore all older values of that key</li><li>Return <strong>“not found”</strong></li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌──────────────────────┐</span><br><span class="line">│      MemTable        │</span><br><span class="line">│  apple <span class="operator">=</span> <span class="operator">&lt;</span>tombstone<span class="operator">&gt;</span> │   ← <span class="keyword">new</span> <span class="keyword">delete</span></span><br><span class="line">└──────────────────────┘</span><br><span class="line">           ▲</span><br><span class="line">           │</span><br><span class="line">┌──────────────────────┐</span><br><span class="line">│      SSTable_1       │</span><br><span class="line">│   apple <span class="operator">=</span> red        │   ← <span class="keyword">old</span> <span class="keyword">value</span></span><br><span class="line">└──────────────────────┘</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="B-Tree">B+ Tree</h3><p>A <strong>B+ Tree</strong> is a <strong>balanced search tree</strong> that stores <strong>sorted data</strong> and works <strong>efficiently on disk</strong>.<br>It is widely used in databases (MySQL, PostgreSQL, SQLite) for <strong>fast searching and indexing</strong>.</p><h4 id="How-It-Works">How It Works</h4><ul><li>Each node stores <strong>many keys and child pointers</strong> (not just 2 like a binary tree)</li><li><strong>Internal nodes</strong>: store only keys to guide the search</li><li><strong>Leaf nodes</strong>: store the actual key–value pairs</li><li><strong>Leaf nodes are linked</strong> like a chain for fast range scans</li><li>The tree stays <strong>balanced</strong> — all leaf nodes are at the same depth</li></ul><h4 id="Structure">Structure</h4><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">                         [30 | 60]</span><br><span class="line">                     /               \</span><br><span class="line">         ┌───────────────┐     ┌───────────────┐</span><br><span class="line">         ▼                               ▼</span><br><span class="line">   [10 | 20]                        [40 | 50 | 55]             ← internal nodes</span><br><span class="line">     /    |    \                       /    |     \</span><br><span class="line"> ┌───┐ ┌───┐ ┌───┐             ┌───┐ ┌───┐ ┌───┐</span><br><span class="line">▼       ▼      ▼               ▼       ▼      ▼</span><br><span class="line">[5 8 9] [12 18 19] [22 27 28]   [35 38 39] [42 47 49] [53 58 59]  ← leaf nodes</span><br><span class="line">│         │         │             │          │           │</span><br><span class="line">└─────────┴─────────┴─────────────┴──────────┴───────────┘</span><br><span class="line">             (all leaf nodes linked left → right)</span><br></pre></td></tr></tbody></table></figure><h5 id="Why-B-Tree-Is-Efficient-on-Disk">Why B+ Tree Is Efficient on Disk</h5><h5 id="📦-Fewer-Disk-Reads-High-Fan-Out">📦 Fewer Disk Reads (High Fan-Out)</h5><ul><li>Each node stores <strong>many keys</strong> (hundreds)</li><li>The tree becomes <strong>short and wide</strong></li><li>Searching needs only a <strong>few node accesses</strong></li><li>→ <strong>Fewer slow disk reads</strong></li></ul><h5 id="📏-Nodes-Match-Disk-Page-Size">📏 Nodes Match Disk Page Size</h5><ul><li>Each node is sized to <strong>fit exactly in one disk page</strong> (e.g. 4KB or 8KB)</li><li>Database reads a <strong>whole node in one I/O</strong></li><li>→ <strong>No wasted disk access</strong></li></ul><h5 id="📚-Sequential-Leaf-Nodes-for-Range-Scans">📚 Sequential Leaf Nodes for Range Scans</h5><ul><li><strong>All leaf nodes are linked</strong> like a chain</li><li>Range queries (e.g. <code>BETWEEN 10 AND 100</code>) can scan leaves in order</li><li>→ Causes <strong>sequential disk reads</strong>, which are <strong>much faster</strong> than random reads</li></ul><hr><h3 id="B-Tree-vs-LSM-Tree-—-Overall-Comparison">B+ Tree vs LSM Tree — Overall Comparison</h3><table><thead><tr><th>Feature</th><th>B+ Tree</th><th>LSM Tree</th></tr></thead><tbody><tr><td><strong>Main goal</strong></td><td>Fast reads</td><td>Fast writes</td></tr><tr><td><strong>Data layout</strong></td><td>One big balanced tree</td><td>Many sorted SSTable files in levels</td></tr><tr><td><strong>Where writes go</strong></td><td>Directly update leaf pages on disk</td><td>First to WAL + MemTable (RAM), then flushed</td></tr><tr><td><strong>Write pattern</strong></td><td>Random writes (in-place updates)</td><td>Sequential writes (append-only + compaction)</td></tr><tr><td><strong>Write speed</strong></td><td>❌ Slower (many small random I/O)</td><td>✅ Very fast (batched, sequential)</td></tr><tr><td><strong>Read path</strong></td><td>✅ One binary search path through tree</td><td>❌ Must search memtable + many SSTs across levels</td></tr><tr><td><strong>Read speed</strong></td><td>✅ Very fast</td><td>⚠️ Slower (more disk seeks, merging needed)</td></tr><tr><td><strong>Range queries</strong></td><td>✅ Very efficient (linked leaves)</td><td>⚠️ Slower (must merge multiple files)</td></tr><tr><td><strong>Compaction needed</strong></td><td>❌ No</td><td>✅ Yes (periodically merges old SSTs)</td></tr><tr><td><strong>Space usage</strong></td><td>⚠️ May get fragmented (page splits, deletes)</td><td>✅ Compact (immutable files, merged)</td></tr><tr><td><strong>Memory use</strong></td><td>Lower (no memtable)</td><td>Higher (memtable + bloom filters)</td></tr><tr><td><strong>Typical use</strong></td><td>OLTP SQL DBs (MySQL, PostgreSQL, SQLite)</td><td>Key-value stores (RocksDB, LevelDB, Cassandra)</td></tr></tbody></table><hr><h3 id="std-shared-ptr"><code>std::shared_ptr</code></h3><h4 id="Overview">Overview</h4><ul><li><strong><code>std::shared_ptr&lt;T&gt;</code></strong> is a smart pointer that <strong>shares ownership</strong> of a heap object.</li><li>It keeps a <strong>reference count</strong>; when the count drops to <strong>0</strong>, the object is <strong>deleted automatically</strong>.</li><li>Provides pointer-like access (<code>-&gt;</code>, <code>*</code>) with <strong>automatic lifetime management</strong>.</li></ul><h4 id="Ownership-Control-Block">Ownership &amp; Control Block</h4><ul><li>Each managed object has an associated <strong>control block</strong> storing:<ul><li><strong>Strong count</strong>: number of <code>shared_ptr</code> owners.</li><li>(Optionally) a <strong>weak count</strong> for <code>std::weak_ptr</code>.</li><li>Custom <strong>deleter/allocator</strong> metadata.</li></ul></li><li>Creating/copying a <code>shared_ptr</code> <strong>increments</strong> the strong count; destroying/resetting <strong>decrements</strong> it.</li></ul><h4 id="Lifecycle-Step-by-Step">Lifecycle (Step-by-Step)</h4><ol><li><strong>Construction</strong>: Create with <code>std::make_shared&lt;T&gt;(...)</code> → strong count becomes <strong>1</strong>.</li><li><strong>Copy</strong>: Assign/copy to another <code>shared_ptr</code> → strong count <strong>+1</strong>.</li><li><strong>Move</strong>: Move-construct/assign transfers ownership → source loses ownership, count unchanged.</li><li><strong>Scope Exit / Reset</strong>: A <code>shared_ptr</code> is destroyed or <code>reset()</code> is called → strong count <strong>−1</strong>.</li><li><strong>Deletion</strong>: When strong count reaches <strong>0</strong>, the managed object is <strong>destroyed</strong>, and control block is released when weak count is also 0.</li></ol><h4 id="Reference-Count-Model">Reference Count Model</h4><ul><li><p><strong>Transitions</strong>:</p><ul><li><strong>Copy</strong>:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo stretchy="false">(</mo><mi>t</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">c(t+1) = c(t) + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li><li><strong>Destroy / Reset</strong>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo stretchy="false">(</mo><mi>t</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>−</mo><mn>14</mn></mrow><annotation encoding="application/x-tex">c(t+1) = c(t) - 14</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">14</span></span></span></span></li><li><strong>Move</strong>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo stretchy="false">(</mo><mi>t</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c(t+1) = c(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span> (ownership transferred, count unchanged)</li></ul></li><li><p><strong>Deletion condition</strong>:</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>if&nbsp;</mtext><mi>c</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mtext>  </mtext><mo>⇒</mo><mtext>  </mtext><mtext>delete&nbsp;object</mtext></mrow><annotation encoding="application/x-tex">  \text{if } c(t) = 0 \;\Rightarrow\; \text{delete object}  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">if&nbsp;</span></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">delete&nbsp;object</span></span></span></span></span></span></li></ul><h4 id="Example">Example</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span>  <span class="comment">// for std::shared_ptr</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// Create a shared_ptr to an int (value = 42)</span></span><br><span class="line">    shared_ptr&lt;<span class="type">int</span>&gt; p1 = <span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"p1 created. use_count = "</span> &lt;&lt; p<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="comment">// Output: 1 (only p1 owns the object)</span></span><br><span class="line"></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// Copy p1 to p2 → both point to the same object</span></span><br><span class="line">        shared_ptr&lt;<span class="type">int</span>&gt; p2 = p1;</span><br><span class="line">        cout &lt;&lt; <span class="string">"p2 created from p1. use_count = "</span> &lt;&lt; p<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        <span class="comment">// Output: 2 (p1 and p2 both own it)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Copy p2 to p3 → all three share the same object</span></span><br><span class="line">        shared_ptr&lt;<span class="type">int</span>&gt; p3 = p2;</span><br><span class="line">        cout &lt;&lt; <span class="string">"p3 created from p2. use_count = "</span> &lt;&lt; p<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        <span class="comment">// Output: 3 (p1, p2, p3 all own it)</span></span><br><span class="line">    } <span class="comment">// p2 and p3 are destroyed here → count goes down to 1</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"p2 and p3 gone. use_count = "</span> &lt;&lt; p<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Manually release p1 → count goes to 0 → object is deleted</span></span><br><span class="line">    p<span class="number">1.</span><span class="built_in">reset</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">"p1 reset. object deleted now.\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Circular-Reference-with-std-shared-ptr">Circular Reference with <code>std::shared_ptr</code></h4><ul><li><code>shared_ptr</code> uses reference counting.</li><li>If two objects hold <code>shared_ptr</code> to each other, their counts never reach 0.</li><li>They never get deleted → memory leak.</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> { shared_ptr&lt;Node&gt; other; };</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">auto</span> a = <span class="built_in">make_shared</span>&lt;Node&gt;(); <span class="comment">// a:1</span></span><br><span class="line">    <span class="keyword">auto</span> b = <span class="built_in">make_shared</span>&lt;Node&gt;(); <span class="comment">// b:1</span></span><br><span class="line">    a-&gt;other = b; <span class="comment">// b:2</span></span><br><span class="line">    b-&gt;other = a; <span class="comment">// a:2</span></span><br><span class="line">    cout &lt;&lt; a.<span class="built_in">use_count</span>() &lt;&lt; <span class="string">" "</span> &lt;&lt; b.<span class="built_in">use_count</span>(); <span class="comment">// 2 2</span></span><br><span class="line">} <span class="comment">// a,b go out of scope but not deleted (cycle)</span></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="std-weak-ptr"><code>std::weak_ptr</code></h3><h4 id="Overview-2">Overview</h4><ul><li><code>weak_ptr</code> <strong>does not own</strong> the object; it just <strong>observes</strong> one managed by <code>shared_ptr</code>.</li><li>It <strong>does not increase</strong> reference count, so it <strong>breaks cycles</strong>.</li><li>When all <code>shared_ptr</code> owners are gone, the object is deleted and any <code>weak_ptr</code> becomes <strong>expired</strong>.</li></ul><h4 id="Example-2">Example</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> { weak_ptr&lt;Node&gt; other; };</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">auto</span> a = <span class="built_in">make_shared</span>&lt;Node&gt;(); <span class="comment">// A owners: 1</span></span><br><span class="line">    <span class="keyword">auto</span> b = <span class="built_in">make_shared</span>&lt;Node&gt;(); <span class="comment">// B owners: 1</span></span><br><span class="line"></span><br><span class="line">    a-&gt;other = b; <span class="comment">// weak watch of B (owners unchanged: B still 1)</span></span><br><span class="line">    b-&gt;other = a; <span class="comment">// weak watch of A (owners unchanged: A still 1)</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"A owners = "</span> &lt;&lt; a.<span class="built_in">use_count</span>() &lt;&lt; <span class="string">"\n"</span>; <span class="comment">// 1</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"B owners = "</span> &lt;&lt; b.<span class="built_in">use_count</span>() &lt;&lt; <span class="string">"\n"</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// When a and b go out of scope, both counts drop to 0 → deleted.</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a-&gt;next = b;  <span class="comment">// next is weak_ptr</span></span><br><span class="line"></span><br><span class="line">           <span class="built_in">b</span> (shared_ptr)          a-&gt;<span class="built_in">next</span> (weak_ptr)</span><br><span class="line">                │                         │</span><br><span class="line">                ▼                         ▼</span><br><span class="line">        ┌──────────────────────────────────────────┐</span><br><span class="line">        │            control block                 │</span><br><span class="line">        │  - Node address ────────────────┐        │</span><br><span class="line">        │  - <span class="function">strong <span class="title">count</span> <span class="params">(shared_ptrs)</span>   │        |</span></span><br><span class="line"><span class="function">        │  - weak <span class="title">count</span> <span class="params">(weak_ptrs)</span>       │        │</span></span><br><span class="line"><span class="function">        └──────────────────────────────────────────┘</span></span><br><span class="line"><span class="function">                                 ▼</span></span><br><span class="line"><span class="function">                           Node object</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></tbody></table></figure><h4 id="Accessing-Through-weak-ptr">Accessing Through <code>weak_ptr</code></h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> p = a-&gt;other.<span class="built_in">lock</span>()) {</span><br><span class="line">    <span class="comment">// p is a shared_ptr&lt;Node&gt;; object still alive</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// expired: the object was deleted</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Summary">Summary</h4><table><thead><tr><th>Pointer Type</th><th>Increases Ref Count</th><th>Keeps Object Alive</th><th>Can Expire</th></tr></thead><tbody><tr><td><code>shared_ptr</code></td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td><code>weak_ptr</code></td><td>No</td><td>No</td><td>Yes</td></tr></tbody></table><hr><h3 id="References">References</h3><ul><li>A <strong>reference</strong> is an <strong>alias (second name)</strong> for an existing variable.</li><li>It does <strong>not create a copy</strong>.</li><li>Changing the reference changes the <strong>original variable</strong>.</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type&amp; refName = existingVariable;</span><br></pre></td></tr></tbody></table></figure><h4 id="Example-3">Example</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>&amp; r = x; <span class="comment">// r is a reference to x</span></span><br><span class="line"></span><br><span class="line">    r = <span class="number">20</span>;     <span class="comment">// changes x</span></span><br><span class="line">    cout &lt;&lt; x;  <span class="comment">// prints 20</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Key-Points">Key Points</h4><ul><li>Must be <strong>initialized</strong> when declared.</li><li>Cannot be changed to refer to another variable.</li><li>Behaves exactly like the original variable.</li></ul><h4 id="Summary-2">Summary</h4><table><thead><tr><th>Feature</th><th>Reference (<code>&amp;</code>)</th></tr></thead><tbody><tr><td><code>Creates new object?</code></td><td>No</td></tr><tr><td><code>Copies data?   </code></td><td>No</td></tr><tr><td><code>Can be reseated?  </code></td><td>No</td></tr><tr><td><code>Needs initialization </code></td><td>Yes</td></tr><tr><td><code>Syntax   </code></td><td><code>type&amp; name = var;</code></td></tr></tbody></table><h3 id="Constructor-in-C-SkipListNode-Example">Constructor in C++ (SkipListNode Example)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SkipListNode</span> {</span><br><span class="line">    std::string key;</span><br><span class="line">    std::string value;</span><br><span class="line">    std::vector&lt;std::shared_ptr&lt;SkipListNode&gt;&gt; forward;</span><br><span class="line">    std::vector&lt;std::weak_ptr&lt;SkipListNode&gt;&gt; backward;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SkipListNode</span>(<span class="type">const</span> std::string&amp; k, <span class="type">const</span> std::string&amp; v, <span class="type">int</span> level)</span><br><span class="line">        : <span class="built_in">key</span>(k), <span class="built_in">value</span>(v), forward(level, <span class="literal">nullptr</span>),</span><br><span class="line">          <span class="built_in">backward</span>(level, std::<span class="built_in">weak_ptr</span>&lt;SkipListNode&gt;()) {}</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><ul><li><code>key(k)</code> → initializes <strong>key</strong> with parameter <code>k</code>.</li><li><code>value(v)</code> → initializes <strong>value</strong> with parameter <code>v</code>.</li><li><code>forward(level, nullptr)</code> → creates a <strong>vector of size <code>level</code></strong>, each element a <code>nullptr</code> <code>shared_ptr</code>.</li><li><code>backward(level, std::weak_ptr&lt;SkipListNode&gt;())</code> → creates a <strong>vector of size <code>level</code></strong>, each element an <strong>empty</strong> <code>weak_ptr</code>.</li><li>The <strong>constructor body <code>{}</code> is empty</strong> because all fields are initialized in the <strong>initializer list</strong>.</li></ul><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mi>v</mi><mo separator="true">,</mo><mi mathvariant="normal">ℓ</mi><mo stretchy="false">)</mo><mtext>  </mtext><mo>↦</mo><mtext>  </mtext><mo fence="false" stretchy="true" minsize="1.2em" maxsize="1.2em">(</mo><mi>k</mi><mo separator="true">,</mo><mtext>  </mtext><mi>v</mi><mo separator="true">,</mo><mtext>  </mtext><mo stretchy="false">[</mo><mtext>nullptr</mtext><msup><mo stretchy="false">]</mo><mi mathvariant="normal">ℓ</mi></msup><mo separator="true">,</mo><mtext>  </mtext><mo stretchy="false">[</mo><mtext>empty</mtext><msup><mo stretchy="false">]</mo><mi mathvariant="normal">ℓ</mi></msup><mo fence="false" stretchy="true" minsize="1.2em" maxsize="1.2em">)</mo></mrow><annotation encoding="application/x-tex">(k, v, \ell) \;\mapsto\; \big( k,\; v,\; [\text{nullptr}]^\ell,\; [\text{empty}]^\ell \big)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">ℓ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">↦</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2491em;vertical-align:-0.35em;"></span><span class="mord"><span class="delimsizing size1">(</span></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">[</span><span class="mord text"><span class="mord">nullptr</span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">ℓ</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">[</span><span class="mord text"><span class="mord">empty</span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">ℓ</span></span></span></span></span></span></span></span><span class="mord"><span class="delimsizing size1">)</span></span></span></span></span></span><hr><h3 id="Skip-List-Class-Definition">Skip List Class Definition</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Skip List class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SkipList</span> {</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;SkipListNode&gt; head; <span class="comment">// head node of the skip list</span></span><br><span class="line">    <span class="type">int</span> max_level;                      <span class="comment">// maximum level of the skip list</span></span><br><span class="line">    <span class="type">int</span> current_level;                  <span class="comment">// current level of the skip list</span></span><br><span class="line">    <span class="type">size_t</span> size_bytes;                  <span class="comment">// memory usage in bytes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SkipList</span>(<span class="type">int</span> max_lvl = <span class="number">16</span>);         <span class="comment">// constructor, default max level is 16</span></span><br><span class="line">    <span class="comment">// ... other methods will be defined later</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><ul><li>Defines a <strong>class</strong> named <code>SkipList</code>.</li><li>This class represents the <strong>entire skip list structure</strong>, not just a single node.</li></ul><h4 id="Private-Members">Private Members</h4><ul><li><strong>Only accessible inside the class</strong>, hidden from external code.</li><li>Used to store the <strong>internal state</strong> of the skip list.</li></ul><table><thead><tr><th>Member</th><th>Type</th><th>Purpose</th></tr></thead><tbody><tr><td><code>head</code></td><td><code>std::shared_ptr&lt;SkipListNode&gt;</code></td><td>The <strong>head (sentinel) node</strong> of the skip list, entry point for all levels</td></tr><tr><td><code>max_level</code></td><td><code>int</code></td><td>The <strong>maximum number of levels</strong> the skip list can have</td></tr><tr><td><code>current_level</code></td><td><code>int</code></td><td>The <strong>highest level currently used</strong> in the skip list</td></tr><tr><td><code>size_bytes</code></td><td><code>size_t</code></td><td>Tracks <strong>memory usage</strong> (optional bookkeeping)</td></tr></tbody></table><h4 id="Public-Members">Public Members</h4><ul><li><strong>Accessible from outside</strong> the class.</li><li>Provides the <strong>interface</strong> for creating and using the skip list.</li></ul><table><thead><tr><th>Member</th><th>Purpose</th></tr></thead><tbody><tr><td><code>SkipList(int max_lvl = 16)</code></td><td><strong>Constructor</strong> to initialize the skip list. Defaults to <code>max_lvl = 16</code>.</td></tr></tbody></table><h4 id="Why-We-Do-This">Why We Do This</h4><ul><li><p><strong>Encapsulation:</strong><br>Internal details (nodes, size, levels) are kept <code>private</code> so they can’t be modified incorrectly from outside.</p></li><li><p><strong>Clear interface:</strong><br>Only safe, controlled operations will be exposed through <code>public</code> methods later (insert, search, delete).</p></li><li><p><strong>Head node:</strong><br>The head sentinel simplifies logic — every level starts from this single node.</p></li><li><p><strong>max/current levels:</strong><br>Allow the skip list to work like a <strong>multi-level linked list</strong> and support <strong>fast search <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></strong>.</p></li></ul><hr><h1>Skip List Impementaion</h1><h2 id="Core-Operation-Implementation">Core Operation Implementation</h2><h3 id="Insert-or-update-function">Insert or update function</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Insert or update a key-value pair in the skip list</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SkipList::put</span><span class="params">(<span class="type">const</span> std:: string &amp;key, <span class="type">const</span> std::string &amp;value)</span> </span>{</span><br><span class="line">    <span class="comment">// Create an update vector to track the last node visited at each level</span></span><br><span class="line">    std::vector&lt;std::shared_ptr&lt;SkipListNode&gt;&gt; <span class="built_in">update</span>(max_level, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">auto</span> current = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Traverse from top level down to level 0 to find insertion point</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = current_level - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) {</span><br><span class="line">        <span class="keyword">while</span> (current-&gt;forward[i] &amp;&amp; current-&gt;forward[i]-&gt;key &lt; key) {</span><br><span class="line">            current = current-&gt;forward[i]; <span class="comment">// Move forward if next key is still less than target key</span></span><br><span class="line">        }</span><br><span class="line">        update[i] = current; <span class="comment">// Remember the last node before the insertion point at this level</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now current points to the next node at level 0</span></span><br><span class="line">    current = current-&gt;forward[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If key already exists, update its value and adjust size tracking</span></span><br><span class="line">    <span class="keyword">if</span> (current &amp;&amp; current-&gt;key == key) {</span><br><span class="line">        size_bytes += value.<span class="built_in">size</span>() - current-&gt;value.<span class="built_in">size</span>();</span><br><span class="line">        current-&gt;value = value;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Otherwise, create a new node with random level</span></span><br><span class="line">    <span class="type">int</span> new_level = <span class="built_in">random_level</span>();</span><br><span class="line">    <span class="keyword">if</span> (new_level &gt; current_level) {</span><br><span class="line">        <span class="comment">// If new node's level is greater than current lest level,</span></span><br><span class="line">        <span class="comment">// initialize the update pointers at these higher levels to head</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = current_level; i &lt; new_level; ++i) {</span><br><span class="line">            update[i] = head;</span><br><span class="line">        }</span><br><span class="line">        current_level = new_level; <span class="comment">// Update the current highest level</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the new node and add its size</span></span><br><span class="line">    <span class="keyword">auto</span> new_node = std::<span class="built_in">make_shared</span>&lt;SkipListNde&gt;(key, value, new_level);</span><br><span class="line">    size_bytes += key.<span class="built_in">size</span>() + value.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Insert the new node by updateing forward pointers at each level</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; new_level; ++i) {</span><br><span class="line">        new_node-&gt;forward[i] = updata[i]-&gt;forward[i];</span><br><span class="line">        update[i]-&gt;forward[i] = new_node;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set backward pointers</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; new_level; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (new_node-&gt;forward[i]) {</span><br><span class="line">            new_node-&gt;forward[i]-&gt;<span class="built_in">set_backward</span>(i, new_node);</span><br><span class="line">        }</span><br><span class="line">        new_node-&gt;<span class="built_in">set_backward</span>(i, update[i]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="Retrieve-function">Retrieve function</h3><h4 id="Code">Code</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Retrieve the value associated with a key in the skip list</span></span><br><span class="line"><span class="function">std::optional&lt;std::string&gt; <span class="title">SkipList::get</span><span class="params">(<span class="type">const</span> std::string &amp;key)</span> </span>{</span><br><span class="line">  <span class="comment">// Optional shared (read) lock for thread-safe access.</span></span><br><span class="line">  <span class="comment">// std::shared_lock&lt;std::shared_mutex&gt; slock(rw_mutex);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> current = head; <span class="comment">// Start from the sentinel head at the topmost level</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Traverse from the current highset level down to level 0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = current_level - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) {</span><br><span class="line">    <span class="comment">// Move forward at level i as long as the next node exists</span></span><br><span class="line">    <span class="comment">// and its key is less than the target key</span></span><br><span class="line">    <span class="keyword">while</span> (current-&gt;forward[i] &amp;&amp; current-&gt;forward[i]-&gt;key &lt; key) {</span><br><span class="line">      current = current-&gt;forward[i];</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step to the candidate node at level 0 (the exact-postion check happens</span></span><br><span class="line">  <span class="comment">// here)</span></span><br><span class="line">  current = current-&gt;forward[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If the candidate matches the key, return the stored value</span></span><br><span class="line">  <span class="keyword">if</span> (current &amp;&amp; current-&gt;key == key) {</span><br><span class="line">    <span class="keyword">return</span> current-&gt;value;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Otherwise, the key does not exist in the list</span></span><br><span class="line">  <span class="keyword">return</span> std::<span class="literal">nullopt</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="How-to-saerch">How to saerch</h4><ul><li>Start from the <strong>top level</strong> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">_</mi><mi>l</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i = current\_level - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal">rre</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>)</li><li>At each level <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>:<ul><li>Move <strong>forward</strong> while <code>next.key &lt; target.key</code></li><li>If blocked, <strong>go down</strong> to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li></ul></li><li>This makes <strong>big jumps at high levels</strong> and <strong>small steps at low levels</strong>:</li></ul><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>top</mtext><mtext>  </mtext><mo>⇒</mo><mtext>  </mtext><mtext>bottom:&nbsp;big</mtext><mo>→</mo><mtext>medium</mtext><mo>→</mo><mtext>small&nbsp;steps</mtext></mrow><annotation encoding="application/x-tex">\text{top} \;\Rightarrow\; \text{bottom: big} \to \text{medium} \to \text{small steps}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">top</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">bottom:&nbsp;big</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord text"><span class="mord">medium</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">small&nbsp;steps</span></span></span></span></span></span><h4 id="How-key-Works-in-get-const-std-string-key">How <code>&amp;key</code> Works in <code>get(const std::string &amp;key)</code></h4><ul><li><code>const std::string &amp;key</code> means:<ul><li><strong><code>key</code> is a reference (alias) to the input string</strong> passed into the function.</li><li>It does <strong>not copy</strong> the input.</li><li>It is just a <strong>different name</strong> for the same string while inside the function.</li></ul></li></ul><p>Let the caller give an input string <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>:</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><mtext>"mkw02020202"</mtext></mrow><annotation encoding="application/x-tex">x = \text{"mkw02020202"}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord text"><span class="mord">"mkw02020202"</span></span></span></span></span></span><p>Call:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get</span>(x);</span><br></pre></td></tr></tbody></table></figure><p>Inside the function:</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">&amp;</mi><mi>k</mi><mi>e</mi><mi>y</mi><mtext>  </mtext><mo>⇒</mo><mtext>  </mtext><mtext>reference&nbsp;to&nbsp;</mtext><mi>x</mi></mrow><annotation encoding="application/x-tex">\&amp;key \;\Rightarrow\; \text{reference to } x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">&amp;</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord text"><span class="mord">reference&nbsp;to&nbsp;</span></span><span class="mord mathnormal">x</span></span></span></span></span><p>So:</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi><mo>≡</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">key \equiv x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span><hr><h3 id="SkipList-Iterator">SkipList Iterator</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SkipListIterator</span> : <span class="keyword">public</span> BaseIterator { <span class="comment">// it defines a class called SkipListIterator that inherits publicly from a base class called BaseIterator</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --- private</span></span><br><span class="line"><span class="comment">// Many other readers are allowed at the same time</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Any writer must wait until all readers finish</span></span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">// Pointer to the current skip list node</span></span><br><span class="line">  std::shared_ptr&lt;SkipListNode&gt; current;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Shared read lock (may be adjusted later for concurrency control)</span></span><br><span class="line">  std::shared_ptr&lt;std::shared_lock&lt;std::shared_mutex&gt;&gt; lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// Constructor: initialize iterator with a starting node</span></span><br><span class="line">  <span class="built_in">SkipListIterator</span>(std::shared_ptr&lt;SkipListNode&gt; node);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Pre-increment: move to the next node and return reference</span></span><br><span class="line">  BaseIterator &amp;<span class="keyword">operator</span>++() <span class="keyword">override</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Equality check: true if both iterators point to the same node</span></span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> BaseIterator &amp;other) <span class="type">const</span> <span class="keyword">override</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Inequality check: true if iterators point to different nodes</span></span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> BaseIterator &amp;other) <span class="type">const</span> <span class="keyword">override</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Dereference operator: return key-value pair of the current node</span></span><br><span class="line">  value_type <span class="keyword">operator</span>*() <span class="type">const</span> <span class="keyword">override</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Identify this iterator as SkipList type</span></span><br><span class="line">  <span class="function">IteratorType <span class="title">get_type</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if iterator is valid (not null and usable)</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">is_valid</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if iterator has reached the end (nullptr)</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">is_end</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the transaction ID associated with the current node</span></span><br><span class="line">  <span class="function"><span class="type">uint64_t</span> <span class="title">get_tranc_id</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the key of the current node</span></span><br><span class="line">  <span class="function">std::string <span class="title">get_key</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the value of the current node</span></span><br><span class="line">  <span class="function">std::string <span class="title">get_value</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="Code-Explain">Code Explain</h4><p><strong>How the <code>:</code> works in a constructor</strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SkipListIterator::<span class="built_in">SkipListIterator</span>(std::shared_ptr&lt;SkipListNode&gt; node)</span><br><span class="line">    : <span class="built_in">current</span>(node) {}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>:</code> introduces the <strong>member initializer list</strong></li><li><code>: current(node)</code> means:<br>“When constructing this object, create the member <code>current</code> and initialize it with <code>node</code>.”</li><li>This happens <strong>before</strong> the <code>{ }</code> constructor body runs</li></ul><p><strong>In simple words:</strong></p><ul><li><code>:</code> introduces the <strong>member initializer list</strong></li><li><code>: current(node)</code> means:<br>“When constructing this object, create the member <code>current</code> and initialize it with <code>node</code>.”</li><li>This happens <strong>before</strong> the <code>{ }</code> constructor body runs</li></ul><p><strong>In simple words:</strong></p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>:</mo><mtext>&nbsp;</mtext><mo>→</mo><mtext>&nbsp;initialize&nbsp;member(s)</mtext></mrow><annotation encoding="application/x-tex">:\ \to\ \text{initialize member(s)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mrel">:</span><span class="mspace">&nbsp;</span></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span><span class="mspace">&nbsp;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">initialize&nbsp;member(s)</span></span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mtext>&nbsp;</mtext><mo stretchy="false">}</mo><mtext>&nbsp;</mtext><mo>→</mo><mtext>&nbsp;then&nbsp;run&nbsp;the&nbsp;constructor&nbsp;body</mtext></mrow><annotation encoding="application/x-tex">\{\ \}\ \to\ \text{then run the constructor body}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mspace">&nbsp;</span><span class="mclose">}</span><span class="mspace">&nbsp;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace">&nbsp;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">then&nbsp;run&nbsp;the&nbsp;constructor&nbsp;body</span></span></span></span></span><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::shared_ptr&lt;std::shared_lock&lt;std::shared_mutex&gt;&gt; lock;</span><br></pre></td></tr></tbody></table></figure><h4 id="Mutex">Mutex</h4><p>A <strong>mutex</strong> (short for <strong>mutual exclusion</strong>) is a <strong>lock object</strong> that ensures <strong>only one thread can access a shared resource at a time</strong>.</p><p><strong>Why We Need a Mutex</strong></p><ul><li>When multiple <strong>threads</strong> run at the same time, they may try to <strong>read and write the same data simultaneously</strong>.</li><li>This can cause <strong>race conditions</strong> — leading to <strong>corrupted or unpredictable results</strong>.</li><li>A <strong>mutex</strong> prevents this by <strong>blocking other threads</strong> until the <strong>current thread finishes using the data</strong>.</li></ul><p><strong>How It Works</strong></p><ol><li><p><code>mtx.lock()</code> — Try to take (lock) the mutex</p><ul><li>If it’s <strong>free</strong>, this thread <strong>acquires it</strong>.</li><li>If another thread already has it, this thread <strong>waits (blocks)</strong>.</li></ul></li><li><p><code>mtx.unlock()</code> — <strong>Release the mutex</strong> so other waiting threads can acquire it.<br>Only one thread at a time can hold the mutex.</p></li></ol><h4 id="shared-mutex">shared_mutex</h4><p>A <strong>shared mutex</strong> is a special kind of mutex that allows <strong>two modes of locking</strong>:</p><ul><li><strong>Shared (read) mode</strong> — many threads can hold it <strong>at the same time</strong> to <strong>read</strong> shared data safely.</li><li><strong>Exclusive (write) mode</strong> — only <strong>one thread</strong> can hold it, and it <strong>blocks all readers and writers</strong> while it <strong>writes</strong>.</li></ul><p>Because of this behavior, it’s also called a <strong>read–write lock</strong>.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::shared_lock&lt;std::shared_mutex&gt;</span><br></pre></td></tr></tbody></table></figure><p>A <strong>lock object</strong> that uses <code>std::shared_mutex</code> in <strong>shared (read) mode</strong>:</p><ul><li>When created, it calls <code>mutex.lock_shared()</code></li><li>When destroyed, it calls <code>mutex.unlock_shared()</code></li><li>Multiple <code>shared_lock</code>s can exist at the same time → <strong>many readers are allowed</strong></li></ul><p><strong>Shared Lock Behavior</strong></p><p>A <strong>shared lock</strong> is specifically made to:</p><ul><li><strong>Allow multiple threads to read at the same time</strong></li><li>While <strong>blocking any writers until all readers are done</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1 LSM Tree Overall Architecture&lt;/h1&gt;
&lt;h2 id=&quot;1-1-Basic-Concepts&quot;&gt;1.1 Basic Concepts&lt;/h2&gt;
&lt;h3 id=&quot;Log-Structured-Merge-Tree-LSM-tree&quot;&gt;Log</summary>
      
    
    
    
    <category term="AstraKV" scheme="https://makewe1.github.io/categories/AstraKV/"/>
    
    
    <category term="C++" scheme="https://makewe1.github.io/tags/C/"/>
    
    <category term="Database" scheme="https://makewe1.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic Programming Notes</title>
    <link href="https://makewe1.github.io/2025/08/29/DataStructures-Algorithms/Dynamic-Programming-Notes/"/>
    <id>https://makewe1.github.io/2025/08/29/DataStructures-Algorithms/Dynamic-Programming-Notes/</id>
    <published>2025-08-29T04:03:18.000Z</published>
    <updated>2025-09-16T12:04:45.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DP-Dependencies">DP Dependencies</h2><p>In <strong>Dynamic Programming (DP)</strong>, each state often depends on results from <strong>smaller subproblems</strong>.<br>The order you compute states matters because <strong>dependencies must be ready first</strong>.</p><h3 id="Key-Takeaways">Key Takeaways</h3><ul><li><p>Always compute dependencies first.</p></li><li><p>DP fails if you process states in the wrong order.</p></li></ul><h3 id="Loop-Order-Examples">Loop Order Examples</h3><p><strong>Original sequence (wrong, dependencies not ready):</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):           <span class="comment"># i = 0 → n-1 (increasing)</span></span><br><span class="line">    dp[i][i] = <span class="literal">True</span></span><br><span class="line">    ans += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):    <span class="comment"># j &gt; i</span></span><br><span class="line">        <span class="keyword">if</span> j - i == <span class="number">1</span>:</span><br><span class="line">            dp[i][j] = (s[i] == s[j])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp[i][j] = (s[i] == s[j]) <span class="keyword">and</span> dp[i+<span class="number">1</span>][j-<span class="number">1</span>]   <span class="comment"># dp[i+1][j-1] may not be ready!</span></span><br><span class="line">        <span class="keyword">if</span> dp[i][j]:</span><br><span class="line">            ans += <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Reversed sequence (correct, dependencies ready):</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):  <span class="comment"># i = n-1 → 0 (decreasing)</span></span><br><span class="line">    dp[i][i] = <span class="literal">True</span></span><br><span class="line">    ans += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):    <span class="comment"># j &gt; i</span></span><br><span class="line">        <span class="keyword">if</span> j - i == <span class="number">1</span>:</span><br><span class="line">            dp[i][j] = (s[i] == s[j])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp[i][j] = (s[i] == s[j]) <span class="keyword">and</span> dp[i+<span class="number">1</span>][j-<span class="number">1</span>]   <span class="comment"># dp[i+1][j-1] always ready now</span></span><br><span class="line">        <span class="keyword">if</span> dp[i][j]:</span><br><span class="line">            ans += <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Classic-DP-procedure">Classic DP procedure</h2><p><strong>State → Base cases → Recurrence → Fill table → Answer</strong></p><h3 id="Example">Example</h3><blockquote><p><strong>Coin Change II — Standard 2D DP Approach</strong></p><p><strong>Given</strong> an integer <code>amount</code> and an integer array <code>coins</code> representing coin denominations,<br><strong>return</strong> the number of <strong>combinations</strong> that make up <code>amount</code>.<br>You may use each coin <strong>unlimited</strong> times; <strong>order doesn’t matter</strong> (i.e., <code>{1,2}</code> is the same as <code>{2,1}</code>).</p></blockquote><h4 id="1-Define-the-DP-State">1. Define the DP State</h4><p><code>dp[i][j]</code>= number of ways to make sum j using the first i coins (coins[0…i-1])</p><ul><li><code>i = 0..n</code> (n = number of coins) → rows</li><li><code>j = 0..amount</code> → columns</li></ul><h4 id="Base-Cases">Base Cases</h4><ul><li><code>dp[i][0] = 1</code> for all <code>i</code> → one way to make amount 0 (choose nothing)</li><li><code>dp[0][j] = 0</code> for all <code>j &gt; 0</code> → can’t make positive sum with 0 coins</li></ul><h4 id="Recurrence-Unbounded-Knapsack-Combinations">Recurrence (Unbounded Knapsack: Combinations)</h4><p>For each coin <code>i (1-indexed)</code> and sum <code>j</code>:</p><ul><li><strong>Don’t use</strong> coin i → <code>dp[i-1][j]</code></li><li><strong>Use</strong> coin i at least once (if <code>j &gt;= coins[i-1]</code>) → <code>dp[i][j - coins[i-1]]</code></li></ul><h4 id="Fill-Order">Fill Order</h4><ul><li>Outer loop: coins <code>i = 1..n</code></li><li>Inner loop: amount <code>j = 0..amount</code></li><li>Build row by row, left to right.</li></ul><h4 id="Answer">Answer</h4><p>Final answer = <code>dp[n][amount]</code></p><h4 id="Reference-Implementation-Python">Reference Implementation (Python)</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">self, amount, coins</span>):</span><br><span class="line">        n = <span class="built_in">len</span>(coins)</span><br><span class="line">        dp = [[<span class="number">0</span>] * (amount + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Base: 1 way to make 0 (choose nothing)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            coin = coins[i - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(amount + <span class="number">1</span>):</span><br><span class="line">                <span class="comment"># don't use coin i</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j]</span><br><span class="line">                <span class="comment"># use coin i (unbounded)</span></span><br><span class="line">                <span class="keyword">if</span> j &gt;= coin:</span><br><span class="line">                    dp[i][j] += dp[i][j - coin]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n][amount]</span><br></pre></td></tr></tbody></table></figure><h2 id="Knapsack-Problem">Knapsack Problem</h2><h3 id="0-1-Knapsack-Problem">0/1 Knapsack Problem</h3><p>You have:</p><ul><li><p><strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></strong> items, each with:</p><ul><li><strong>Weight</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><strong>Value</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul></li><li><p>A <strong>knapsack</strong> with a weight capacity <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span></p></li></ul><p><strong>Goal</strong><br>Choose a subset of items such that:</p><ul><li>The total weight <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≤</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">\le W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span></li><li>The total value is <strong>maximized</strong></li></ul><h4 id="Brute-force-Method">Brute force Method</h4><h5 id="Idea">Idea</h5><p>For each item, we have two choices:</p><ul><li><strong>Include it</strong> (if weight allows)</li><li><strong>Exclude it</strong></li></ul><p>This naturally leads to a binary decision tree of size <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>:</p><ul><li><strong>Depth</strong> = number of items <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></li><li><strong>Each path</strong> = one subset of items</li></ul><h5 id="Recursive-Solution">Recursive Solution</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">knapsack_bruteforce</span>(<span class="params">weights, values, capacity, n</span>):</span><br><span class="line">    <span class="comment"># Base case: no items or no capacity</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> capacity == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If weight of nth item &gt; capacity, we can't take it</span></span><br><span class="line">    <span class="keyword">if</span> weights[n-<span class="number">1</span>] &gt; capacity:</span><br><span class="line">        <span class="keyword">return</span> knapsack_bruteforce(weights, values, capacity, n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Two choices: include or exclude the nth item</span></span><br><span class="line">    include = values[n-<span class="number">1</span>] + knapsack_bruteforce(weights, values, capacity - weights[n-<span class="number">1</span>], n-<span class="number">1</span>)</span><br><span class="line">    exclude = knapsack_bruteforce(weights, values, capacity, n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(include, exclude)</span><br></pre></td></tr></tbody></table></figure><h5 id="How-it-Works">How it Works</h5><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">               {}</span><br><span class="line">         /            \</span><br><span class="line">      {<span class="selector-tag">A</span>}             {}</span><br><span class="line">    /     \         /     \</span><br><span class="line">{<span class="selector-tag">A</span>,<span class="selector-tag">B</span>}   {<span class="selector-tag">A</span>}     {<span class="selector-tag">B</span>}       {}</span><br><span class="line">...      ...    ...        ...</span><br></pre></td></tr></tbody></table></figure><h5 id="Example-Setup">Example Setup</h5><ul><li><strong>Weights</strong>: [1, 2]</li><li><strong>Values</strong>: [4, 5]</li><li><strong>Capacity</strong>: 2</li><li><strong>n</strong> = 2 items</li></ul><p><strong>First call:</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knapsack_bruteforce([<span class="number">1</span>,<span class="number">2</span>], [<span class="number">4</span>,<span class="number">5</span>], <span class="number">2</span>, <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>Item n=2</strong>: weight = 2, value = 5</li><li>Capacity = 2 → weight ≤ capacity → two choices:</li></ul><ol><li><p><strong>Include item 2</strong><br>→ Value = 5 + knapsack(capacity = 2-2=0, n = 1)<br>→ Inner call returns 0 because capacity = 0 → total = 5</p></li><li><p><strong>Exclude item 2</strong><br>→ Call knapsack(capacity = 2, n = 1) → check item 1 next.</p></li></ol><p><strong>Second call (exclude branch):</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knapsack_bruteforce([<span class="number">1</span>,<span class="number">2</span>], [<span class="number">4</span>,<span class="number">5</span>], <span class="number">2</span>, <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>Item n=1</strong>: weight = 1, value = 4</li><li>Capacity = 2 → weight ≤ capacity → two choices:</li></ul><ol><li><p><strong>Include item 1</strong><br>→ Value = 4 + knapsack(capacity = 2-1=1, n = 0) = 4 + 0 = 4</p></li><li><p><strong>Exclude item 1</strong><br>→ Call knapsack(capacity = 2, n = 0) = 0</p></li></ol><p>Max here = <strong>4</strong></p><p><strong>Summary Table</strong></p><table><thead><tr><th>Path</th><th>Items Taken</th><th>Total Value</th></tr></thead><tbody><tr><td>Include item 2</td><td>{2}</td><td>5</td></tr><tr><td>Exclude item 2 → Include item 1</td><td>{1}</td><td>4</td></tr><tr><td>Exclude item 2 → Exclude item 1</td><td>{}</td><td>0</td></tr></tbody></table><p><strong>Max value = 5 → Take item 2 only.</strong></p><h4 id="From-Brute-Force-to-2D-DP-How-We-Simplify-0-1-Knapsack">From Brute Force to 2D DP: How We Simplify 0/1 Knapsack</h4><p>The 0/1 Knapsack problem starts simple:<br>For each item, we can either <strong>take it</strong> or <strong>leave it</strong>.</p><p>At every step, we have two choices:</p><ol><li><strong>Include</strong> the current item if it fits → move to the next item with reduced capacity</li><li><strong>Exclude</strong> the current item → move to the next item with the same capacity</li></ol><p>This brute-force approach explores <strong>all possible subsets</strong>, leading to a time complexity of:</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span><h5 id="Step-1-Realizing-the-Repeated-Work">Step 1: Realizing the Repeated Work</h5><p><strong>recursion tree</strong></p><ul><li>Item 1: weight = 1, value = 1</li><li>Item 2: weight = 2, value = 5</li><li>Capacity = 3</li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Start: (i=<span class="number">2</span>, capacity=<span class="number">3</span>)</span><br><span class="line">Item <span class="number">2</span>: weight=<span class="number">2</span>, value= <span class="number">5</span></span><br><span class="line">                        (i=<span class="number">2</span>, cap=<span class="number">3</span>)</span><br><span class="line">                         /        \</span><br><span class="line">            Exclude item2          Include item2</span><br><span class="line">               (i=<span class="number">1</span>, cap=<span class="number">3</span>)           (i=<span class="number">1</span>, cap=<span class="number">1</span>)</span><br><span class="line">                /      \                  /      \</span><br><span class="line">  Exclude item1   Include item1   Exclude item1   Include item1</span><br><span class="line">   (i=<span class="number">0</span>,<span class="number">3</span>)         (i=<span class="number">0</span>,<span class="number">2</span>)         (i=<span class="number">0</span>,<span class="number">1</span>)         (i=<span class="number">0</span>,<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><p>When we draw the recursion tree, we notice something important:</p><ul><li>Many branches <strong>reach the same subproblem</strong> again and again.</li></ul><p>From the recursive tree we see:</p><p>Two different paths reach the <strong>same subproblem</strong> <code>(i=1, cap=1)</code>:</p><ul><li>Path A: <strong>Include</strong> item 3 (cap: 2 → 1) → <strong>Exclude</strong> item 2 → <code>(i=1, cap=1)</code></li><li>Path B: <strong>Exclude</strong> item 3 (cap: 2) → <strong>Include</strong> item 2 (2 → 1) → <code>(i=1, cap=1)</code></li></ul><p>Both paths lead to the <strong>same <code>(i, cap)</code></strong>, but brute force recomputes it each time.</p><h5 id="Step-2-Memoization-to-the-Rescue">Step 2: Memoization to the Rescue</h5><p>To avoid recomputing, we add a <strong>dictionary (memo)</strong>:</p><ul><li><p>Every time we solve a subproblem <code>(i, capacity)</code>,<br>we <strong>store</strong> the result in <code>memo[(i, capacity)]</code>.</p></li><li><p>If the same <code>(i, capacity)</code> appears again,<br>we <strong>look it up</strong> instead of recomputing.</p></li></ul><p>This immediately cuts down all <strong>duplicate work</strong>:<br>Each subproblem is solved <strong>only once</strong>.</p><p><strong>Result</strong>:<br>The recursion tree shrinks, and time complexity drops from <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>×</mo><mi>W</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \times W)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">)</span></span></span></span>,<br>because there are only <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>×</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">n \times W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span> unique subproblems.</p><h5 id="Step-3-Moving-to-2D-DP">Step 3: Moving to 2D DP</h5><p>Memoization naturally leads to the idea of a <strong>DP table</strong>:</p><ul><li>Instead of a dictionary, we use a <strong>2D array</strong> <code>dp[i][w]</code></li><li><code>dp[i][w]</code> = maximum value using the <strong>first i items</strong> with <strong>capacity w</strong></li><li>We fill the table iteratively so each subproblem is solved <strong>exactly once</strong> in a structured order</li></ul><p><strong>Recurrence</strong></p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>w</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>w</mi><mo stretchy="false">]</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if&nbsp;</mtext><msub><mi>w</mi><mi>i</mi></msub><mo>&gt;</mo><mi>w</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>w</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mtext>  </mtext><msub><mi>v</mi><mi>i</mi></msub><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>w</mi><mo>−</mo><msub><mi>w</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>otherwise</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">dp[i][w] =\begin{cases}dp[i-1][w] &amp; \text{if } w_i &gt; w \\\max(dp[i-1][w], \; v_i + dp[i-1][w - w_i]) &amp; \text{otherwise}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">]</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop">max</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">])</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if&nbsp;</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">otherwise</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><p><strong>Complexity</strong></p><ul><li><strong>Time</strong>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>W</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> O(nW) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">nW</span><span class="mclose">)</span></span></span></span></li><li><strong>Space</strong>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>W</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> O(nW) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">nW</span><span class="mclose">)</span></span></span></span></li></ul><p>A huge improvement over the original <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> O(2^n) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> brute force.</p><h5 id="2D-DP-Solution">2D DP Solution</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">knapsack_dp_2d</span>(<span class="params">weights, values, capacity</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(weights)</span><br><span class="line">    <span class="comment"># dp[i][w] = max value using first i items with capacity w</span></span><br><span class="line">    dp = [[<span class="number">0</span>] * (capacity + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Build table iteratively</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):                 <span class="comment"># items 1..n</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, capacity + <span class="number">1</span>):      <span class="comment"># capacity 1..W</span></span><br><span class="line">            <span class="keyword">if</span> weights[i-<span class="number">1</span>] &gt; w:</span><br><span class="line">                <span class="comment"># can't take item i-1</span></span><br><span class="line">                dp[i][w] = dp[i-<span class="number">1</span>][w]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># choose max of including or excluding item i-1</span></span><br><span class="line">                include = values[i-<span class="number">1</span>] + dp[i-<span class="number">1</span>][w - weights[i-<span class="number">1</span>]]</span><br><span class="line">                exclude = dp[i-<span class="number">1</span>][w]</span><br><span class="line">                dp[i][w] = <span class="built_in">max</span>(include, exclude)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[n][capacity]</span><br></pre></td></tr></tbody></table></figure><h4 id="From-2D-DP-to-1D-DP">From 2D DP to 1D DP</h4><h5 id="Insight">Insight</h5><p>When we first built the 2D DP table for 0/1 Knapsack, each cell</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>max</mi><mo>⁡</mo><mo fence="true" stretchy="true" minsize="1.2em" maxsize="1.2em">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mtext>  </mtext><msub><mi>v</mi><mi>i</mi></msub><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><msub><mi>w</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mo fence="true" stretchy="true" minsize="1.2em" maxsize="1.2em">)</mo></mrow><annotation encoding="application/x-tex">dp[i][j] = \max \bigl( dp[i-1][j], \; v_i + dp[i-1][j - w_i] \bigr)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mop">max</span><span class="mopen"><span class="delimsizing size1">(</span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mclose"><span class="delimsizing size1">)</span></span></span></span></span></span><p>represented the <strong>best value</strong> for the first <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex"> i </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> items and capacity <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex"> j </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>.</p><p>But if we look closely:</p><ul><li>Every update for <strong>row i</strong> depends <strong>only</strong> on <strong>row i-1</strong></li><li>Once we finish <strong>row i</strong>, we never touch <strong>row i-1</strong> again</li></ul><p><strong>Key</strong><br>We don’t need the entire 2D table.<br>We can just <strong>reuse the same row</strong> over and over,</p><p><strong>The Mental Shift</strong></p><p>Imagine we keep a single <strong>1D array</strong> <code>dp[j]</code> for capacities <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>…</mo><mi>W</mi></mrow><annotation encoding="application/x-tex"> 0 \ldots W </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>.</p><p>While processing item <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex"> i </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>:</p><ul><li><strong>Before update:</strong> <code>dp[j]</code> = best value <strong>before</strong> using item <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex"> i </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></li><li><strong>After update:</strong> <code>dp[j]</code> = best value <strong>after</strong> using item <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex"> i </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></li></ul><p>But there’s a catch:</p><ul><li>If we update <code>dp[j]</code> <strong>left → right</strong>,<br>the new value of <code>dp[j - w_i]</code> might already include item <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex"> i </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>, so we’d <strong>count it twice</strong>.</li><li>To avoid this, we go <strong>right→left</strong>, so we always use the old value first. This keeps the logic correct while collapsing two dimensions into one.</li></ul><p><strong>Formula</strong></p><p>Now the recurrence becomes:</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>max</mi><mo>⁡</mo><mo fence="true" stretchy="true" minsize="1.2em" maxsize="1.2em">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mtext>  </mtext><msub><mi>v</mi><mi>i</mi></msub><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><msub><mi>w</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mo fence="true" stretchy="true" minsize="1.2em" maxsize="1.2em">)</mo></mrow><annotation encoding="application/x-tex">dp[j] = \max \bigl(dp[j], \; v_i + dp[j - w_i] \bigr)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mop">max</span><span class="mopen"><span class="delimsizing size1">(</span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mclose"><span class="delimsizing size1">)</span></span></span></span></span></span><p>with ( j ) iterating <strong>from ( W ) down to ( w_i )</strong>.</p><h5 id="1D-DP-Solution">1D DP Solution</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">knapsack_dp_1d</span>(<span class="params">weights, values, capacity</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(weights)</span><br><span class="line">    dp = [<span class="number">0</span>] * (capacity + <span class="number">1</span>)  <span class="comment"># dp[w] = best value for capacity w so far</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):        <span class="comment"># items 1..n</span></span><br><span class="line">        w_i, v_i = weights[i-<span class="number">1</span>], values[i-<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># Right → left so we use previous row values before overwriting</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(capacity, w_i - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            dp[w] = <span class="built_in">max</span>(dp[w], v_i + dp[w - w_i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[capacity]</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;DP-Dependencies&quot;&gt;DP Dependencies&lt;/h2&gt;
&lt;p&gt;In &lt;strong&gt;Dynamic Programming (DP)&lt;/strong&gt;, each state often depends on results from &lt;str</summary>
      
    
    
    
    <category term="DataStructure-Algorithms" scheme="https://makewe1.github.io/categories/DataStructure-Algorithms/"/>
    
    
    <category term="DataStructure Algorithms" scheme="https://makewe1.github.io/tags/DataStructure-Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Tree</title>
    <link href="https://makewe1.github.io/2025/08/29/DataStructures-Algorithms/Tree/"/>
    <id>https://makewe1.github.io/2025/08/29/DataStructures-Algorithms/Tree/</id>
    <published>2025-08-29T04:03:18.000Z</published>
    <updated>2025-09-17T10:00:20.602Z</updated>
    
    <content type="html"><![CDATA[<h1>Log-Structured Merge Tree (LSM-tree)</h1><h2 id="Definition-Easy">Definition (Easy)</h2><p>An <strong>LSM-tree</strong> is a way to store <strong>key–value data</strong> that makes <strong>writing very fast</strong> by:</p><ul><li><strong>First writing</strong> new data into memory (a small sorted table)</li><li><strong>Later saving</strong> it to disk as sorted files (<strong>SSTables</strong>)</li><li><strong>Merging</strong> old files in the background to keep them organized</li></ul><h2 id="Function">Function</h2><h3 id="LSM-Tree-Overall-Storage-Flow">LSM-Tree Overall Storage Flow</h3><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">             (new writes)</span><br><span class="line">                 ↓</span><br><span class="line">+---------------------------+</span><br><span class="line">|         MemTable          |  (in memory, e.g. skip list, sorted)</span><br><span class="line">+---------------------------+</span><br><span class="line">                 │ flush (when full)</span><br><span class="line">                 ▼</span><br><span class="line">+---------------------------+</span><br><span class="line">|   SSTable_1 (Level 0)     |  &lt;- small, sorted internally</span><br><span class="line">+---------------------------+</span><br><span class="line">+---------------------------+</span><br><span class="line">|   SSTable_2 (Level 0)     |  &lt;- small, sorted internally</span><br><span class="line">+---------------------------+</span><br><span class="line">          ... more L0 SSTs ...</span><br><span class="line">        (can have overlapping keys)</span><br><span class="line">                 │</span><br><span class="line">                 │ compaction merges &amp; sorts</span><br><span class="line">                 ▼</span><br><span class="line">+-----------------------------------------------------+</span><br><span class="line">|           Level 1 SSTables (bigger)                 |</span><br><span class="line">|  - Disjoint key ranges (no overlap between files)   |</span><br><span class="line">+-----------------------------------------------------+</span><br><span class="line">                 │</span><br><span class="line">                 ▼</span><br><span class="line">+-----------------------------------------------------+</span><br><span class="line">|           Level 2, Level 3 ...                      |</span><br><span class="line">|   - Much larger SSTables                            |</span><br><span class="line">|   - Still disjoint key ranges                       |</span><br><span class="line">+-----------------------------------------------------+</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Log-Structured Merge Tree (LSM-tree)&lt;/h1&gt;
&lt;h2 id=&quot;Definition-Easy&quot;&gt;Definition (Easy)&lt;/h2&gt;
&lt;p&gt;An &lt;strong&gt;LSM-tree&lt;/strong&gt; is a way to st</summary>
      
    
    
    
    <category term="DataStructure-Algorithms" scheme="https://makewe1.github.io/categories/DataStructure-Algorithms/"/>
    
    
    <category term="DataStructure Algorithms" scheme="https://makewe1.github.io/tags/DataStructure-Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>CS:APP 15213 Data Lab Guide</title>
    <link href="https://makewe1.github.io/2025/08/28/CMU%2015-213/15-213%20data-lab/"/>
    <id>https://makewe1.github.io/2025/08/28/CMU%2015-213/15-213%20data-lab/</id>
    <published>2025-08-27T23:00:00.000Z</published>
    <updated>2025-09-18T22:15:11.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="logicalNeg">logicalNeg</h2><h3 id="Step-1-—-Define-the-goal">Step 1 — Define the goal</h3><p>We need a function that acts like logical <code>!x</code> without using the <code>!</code> operator:</p><ul><li>If <code>x == 0</code>, return <strong>1</strong></li><li>If <code>x != 0</code>, return <strong>0</strong></li></ul><h3 id="Step-2-—-Find-the-unique-bit-feature-of-0">Step 2 — Find the unique bit feature of 0</h3><p>We notice that for <code>x == 0</code>, both <code>x</code> and <code>-x</code> are <code>0</code>, so their sign bit is <code>0</code>.<br>For any <code>x != 0</code>, either <code>x</code> or <code>-x</code> is negative, so at least one sign bit is <code>1</code>.</p><p>This means <code>(x | -x)</code> will have sign bit = <code>0</code> only when <code>x == 0</code>,<br>and sign bit = <code>1</code> for any <code>x != 0</code>.</p><p>Since <code>-x</code> must be expressed using allowed operators,<br>we write it as <code>~x + 1</code> (two’s complement negation).</p><h3 id="Step-3-—-Turn-the-sign-bit-into-0-1">Step 3 — Turn the sign bit into 0/1</h3><p>We have two methods:</p><h4 id="Method-1-—-Use-1-and-1">Method 1 — Use <code>&amp; 1</code> and <code>^ 1</code></h4><p><code>(((~x + 1) | x) &gt;&gt; 31) &amp; 1</code> gives <strong>1</strong> when <code>x != 0</code>, <strong>0</strong> when <code>x == 0</code>.<br>Flip to match logical NOT:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((((~x + <span class="number">1</span>) | x) &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>) ^ <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Method-2-—-Add-1-Cleaner-Way">Method 2 — Add 1 (Cleaner Way)</h4><p>When we do an arithmetic right shift by 31 bits:</p><ul><li>For any nonzero <code>x</code>, <code>(((~x + 1) | x) &gt;&gt; 31)</code> gives <strong>-1</strong> (all bits = 1).</li><li>For <code>x == 0</code>, the result is <strong>0</strong>.</li></ul><p>So if we simply add 1:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(((~x + <span class="number">1</span>) | x) &gt;&gt; <span class="number">31</span>) + <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="howManyBits">howManyBits</h2><p>The goal is to return the minimum number of bits required to represent an integer <code>x</code> in <strong>two’s complement</strong>.</p><p>Examples:</p><ul><li><code>howManyBits(12) = 5</code></li><li><code>howManyBits(298) = 10</code></li><li><code>howManyBits(-5) = 4</code></li><li><code>howManyBits(0) = 1</code></li><li><code>howManyBits(-1) = 1</code></li><li><code>howManyBits(0x80000000) = 32</code></li></ul><h3 id="Intuition">Intuition</h3><p>Two’s complement numbers have <strong>runs of identical leading bits</strong>:</p><ul><li>Non-negative values start with leading <code>0</code>s.</li><li>Negative values start with leading <code>1</code>s.</li></ul><p>To get the <em>minimal</em> width, we:</p><ol><li>Keep <strong>one sign bit</strong> (a single leading <code>0</code> or <code>1</code>), and</li><li>Count up to the <strong>first bit that differs</strong> from the sign bit.</li></ol><p>So the problem reduces to: <strong>find the index of the most significant “meaningful” bit</strong>, then add 1 for the sign.</p><h3 id="Normalizing-negative-and-positive-numbers">Normalizing negative and positive numbers</h3><p>If we could make both cases look like “non-negative with leading zeros,” then the job is just “find the highest <code>1</code> bit.” We can!</p><p>We get the sign:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> sign = x &gt;&gt; <span class="number">31</span>; <span class="comment">// 0x00000000 if x &gt;= 0, 0xFFFFFFFF if x &lt; 0</span></span><br></pre></td></tr></tbody></table></figure><p>Then:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ^ sign</span><br></pre></td></tr></tbody></table></figure><p>acts like:</p><ul><li>If <code>x &gt;= 0</code>: <code>sign = 0</code>, so <code>x ^ 0 = x</code> (unchanged).</li><li>If <code>x &lt; 0</code>:  <code>sign = -1</code> (all ones), so <code>x ^ (-1) = ~x</code> (bitwise NOT).</li></ul><p><strong>Effect:</strong> negatives get flipped to remove their leading 1s; positives stay as they are. After this, we can uniformly “search for the highest 1.”</p><h3 id="Binary-search-on-bit-ranges">Binary search on bit ranges</h3><p>We check chunks 16, 8, 4, 2, 1 bits to find where the top <code>1</code> lives. Each step says:</p><ul><li>“Is there any <code>1</code> in the upper half?”</li><li>If yes, we advance the count and shift <code>x</code> down into that half.</li><li>If not, we keep searching the lower half.</li></ul><p>We use <code>!!(expr)</code> to normalize to <code>0</code> or <code>1</code>, and then shift that <code>1</code> by a power-of-two to add <code>16</code>, <code>8</code>, <code>4</code>, <code>2</code>, or <code>1</code> to the answer without branches.</p><h3 id="Always-add-one-sign-bit">Always add one sign bit</h3><p>After counting the highest <code>1</code> bit, we always add <strong>one more bit</strong> for the sign.</p><p>This covers all cases:</p><ul><li>For <code>x = 0</code>, no bits are set, so <code>min_bits = 0</code>, plus sign → <code>1</code> bit.</li><li>For <code>x = -1</code>, all bits are <code>1</code>, but flipping gives <code>0</code>, so <code>min_bits = 0</code>, plus sign → <code>1</code> bit.</li><li>For <code>x = 1</code>, highest bit = 0, so <code>min_bits = 1</code>, plus sign → <code>2</code> bits.</li></ul><h3 id="Final-implementation">Final implementation</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">howManyBits</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> sign = x &gt;&gt; <span class="number">31</span>;</span><br><span class="line">  <span class="type">int</span> min_bits = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> tmp;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Normalize: positives unchanged, negatives flipped</span></span><br><span class="line">  x = x ^ sign;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Find index of highest 1 via binary search on bit ranges</span></span><br><span class="line">  tmp = !!(x &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">4</span>; min_bits += tmp; x &gt;&gt;= tmp;</span><br><span class="line">  tmp = !!(x &gt;&gt; <span class="number">8</span>)  &lt;&lt; <span class="number">3</span>; min_bits += tmp; x &gt;&gt;= tmp;</span><br><span class="line">  tmp = !!(x &gt;&gt; <span class="number">4</span>)  &lt;&lt; <span class="number">2</span>; min_bits += tmp; x &gt;&gt;= tmp;</span><br><span class="line">  tmp = !!(x &gt;&gt; <span class="number">2</span>)  &lt;&lt; <span class="number">1</span>; min_bits += tmp; x &gt;&gt;= tmp;</span><br><span class="line">  tmp = !!(x &gt;&gt; <span class="number">1</span>);       min_bits += tmp; x &gt;&gt;= tmp;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the last bit (if x is 1 now)</span></span><br><span class="line">  min_bits += x;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Plus one sign bit to cover all cases</span></span><br><span class="line">  min_bits += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> min_bits;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="floatPower2">floatPower2</h2><h3 id="32-bit-float-Bit-Layout-Diagram">32-bit float Bit Layout Diagram</h3><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌───────┬────────────────────┬───────────────────────────────────────┐</span><br><span class="line">│ Sign  │      Exponent      |               Fraction                |</span><br><span class="line">│ (1bit)│      (8 bits)      |              (23 bits)                |</span><br><span class="line">├───────┼────────────────────┼───────────────────────────────────────┤</span><br><span class="line">│   0   │ 0 0 0 0 0 0 0 0    | 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 |</span><br><span class="line">└───────┴────────────────────┴───────────────────────────────────────┘</span><br><span class="line"> bit 31         bits 30–23                         bits 22–0</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>example</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 10000001 01100000000000000000000</span><br><span class="line">│ │        └─ mantissa (1.011...)</span><br><span class="line">│ └ exponent (129 = 2 after bias)</span><br><span class="line">└ sign</span><br></pre></td></tr></tbody></table></figure><p><strong>Special Case: Denormal / Subnormal Numbers</strong></p><p><strong>Condition:</strong></p><ul><li><code>exponent = 0</code></li><li>and <code>fraction ≠ 0</code></li></ul><p><strong>Then:</strong></p><ul><li>There is <strong>no implicit leading <code>1</code></strong> before the fraction bits</li><li>The exponent is treated as <code>1 - 127 = -126</code></li></ul><p><strong>Value Formula:</strong></p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mtext>sign</mtext></msup><mo>×</mo><mn>0.</mn><mtext>fraction&nbsp;bits</mtext><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>126</mn></mrow></msup></mrow><annotation encoding="application/x-tex">(-1)^{\text{sign}} \times 0.\text{fraction bits} \times 2^{-126}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1305em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8805em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">sign</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">0.</span><span class="mord text"><span class="mord">fraction&nbsp;bits</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">126</span></span></span></span></span></span></span></span></span></span></span></span></span><h3 id="Code">Code</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Return the bit-level equivalent of 2.0^x as a float (single-precision)</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">    <span class="comment">// Too small: smaller than the smallest denorm (2^-149)</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">-149</span>) <span class="keyword">return</span> <span class="number">0u</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Too large: larger than the largest finite power (2^127)</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">127</span>) <span class="keyword">return</span> <span class="number">0x7f800000u</span>; <span class="comment">// +INF</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Normalized range: -126 &lt;= x &lt;= 127</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">-126</span>) {</span><br><span class="line">        <span class="type">unsigned</span> exp = (<span class="type">unsigned</span>)(x + <span class="number">127</span>); <span class="comment">// bias = 127</span></span><br><span class="line">        <span class="keyword">return</span> exp &lt;&lt; <span class="number">23</span>;                   <span class="comment">// sign=0, frac=0</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Denormalized range: -149 &lt;= x &lt;= -127</span></span><br><span class="line">    <span class="comment">// value = frac * 2^-149  =&gt;  frac = 2^(x+149)</span></span><br><span class="line">    <span class="type">unsigned</span> frac = <span class="number">1u</span> &lt;&lt; (x + <span class="number">149</span>);</span><br><span class="line">    <span class="keyword">return</span> frac; <span class="comment">// sign=0, exp=0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;logicalNeg&quot;&gt;logicalNeg&lt;/h2&gt;
&lt;h3 id=&quot;Step-1-—-Define-the-goal&quot;&gt;Step 1 — Define the goal&lt;/h3&gt;
&lt;p&gt;We need a function that acts like log</summary>
      
    
    
    
    <category term="CMU 15-213" scheme="https://makewe1.github.io/categories/CMU-15-213/"/>
    
    
    <category term="C" scheme="https://makewe1.github.io/tags/C/"/>
    
    <category term="Computer Science" scheme="https://makewe1.github.io/tags/Computer-Science/"/>
    
  </entry>
  
  <entry>
    <title>C++ chapter</title>
    <link href="https://makewe1.github.io/2025/08/28/Interview/C++/"/>
    <id>https://makewe1.github.io/2025/08/28/Interview/C++/</id>
    <published>2025-08-27T23:00:00.000Z</published>
    <updated>2025-09-26T00:19:21.027Z</updated>
    
    <content type="html"><![CDATA[<h1>Common C++ Interview Questions</h1><h2 id="C-Basics">C++ Basics</h2><h3 id="Difference-Between-Pointers-and-References">Difference Between Pointers and References</h3><p>A <strong>pointer</strong> stores the address of an object. It is itself a variable(a named object) and has its own address, so you can even have a pointer to a pointer.<br>A pointer can be changed – both the address it stores and the data at that address be modified.</p><p>A <strong>reference</strong> is simply an alias for a variable. Once bound, it cannot be changed to refer to another object, and it must be initialized when declared.</p><p>There is no such things as a “null reference”, but there can be a pointer to a null value.</p><p><strong>1. Definition and Declaration:</strong></p><p>A pointer is a variable whose value is the address of another variable.<br>When declaring a pointer, the <code>*</code> is used.</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line">*ptr = &amp;x;</span><br></pre></td></tr></tbody></table></figure><p>A reference is an alias, created for an already existing variable. When declaring a reference, the <code>&amp;</code> is used.</p><p><strong>2. Usage and Operations:</strong></p><ul><li><strong>Pointer:</strong> By using the dereference operator <code>*</code>, you can access the value of the variable the pointer pointes to. You can also use the address-of operator <code>&amp;</code> to obtain the address of a variable.</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> value = *ptr; <span class="comment">// get the value of the variable the the pointer points to</span></span><br><span class="line"><span class="type">int</span> address = &amp;x; <span class="comment">// obtain the address of variable x</span></span><br></pre></td></tr></tbody></table></figure><ul><li><strong>Reference:</strong> A reference must be initialized when declared, and throughout its entire lifetime, it always refers to the same variable. You don’t need to use the dereference operator, because a reference itself is just another name for the variable.</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> newValue = ref; <span class="comment">// get the reference value</span></span><br></pre></td></tr></tbody></table></figure><p><strong>3. Null Pointers and Null References:</strong></p><p>A pointer can be null(<code>nullptr</code>), meaning it does not point to any valid address.</p><p>A reference must be initialized at the time of declaration, and it cannot be changed to refer to a different object. Therefore, there is no concept of a null reference.</p><p><strong>4. Mutability:</strong></p><ul><li><p><strong>Pointer:</strong> A pointer can change what it points to, allowing it to refer to different memory addresses.</p></li><li><p><strong>Reference:</strong> Once a reference is initialized, it always refers to the same object and cannot be rebound.</p></li></ul><p><strong>5. Usage:</strong></p><ul><li><p><strong>Pointer:</strong> Commonly used for dynamic memory allocation, array operations, and function parameter passing.</p></li><li><p><strong>Reference:</strong> Commonly used for function parameter passing, operator overloading, and create aliases.</p></li></ul><h3 id="Data-Types">Data Types</h3><p><strong>Interger Types: <code>short</code>, <code>int</code>, <code>long</code>, and <code>long long</code></strong></p><ul><li><code>short:</code> at least 16 bits</li><li><code>int:</code> at least as long as short</li><li><code>long:</code> at least 32 bits, and at least as long as <code>int</code></li><li><code>long long</code>: at least 64 bits, and at least as long as <code>long</code></li></ul><p>1 bytes is at least 8 bits. On modern system, a byte is always 8 bits.</p><h3 id="Keyword">Keyword</h3><h4 id="const-Keyword"><code>const</code> Keyword</h4><p><strong>Purpose of <code>const</code></strong><br>A variable or object qualified with <code>const</code> cannot be modified; it becomes read-only.<br>A <code>const</code> variable must be initialized at the point of definition.</p><h5 id="1-Constant-Pointer-a-k-a-“pointer-to-const”">1. Constant Pointer (a.k.a. “pointer to const”)</h5><p>A <em>constant pointer</em> means the pointer points to an object that cannot be modified through that pointer.<br>In other words, the pointer enforces immutable on the object it refers to.</p><p><strong>Key property</strong></p><ul><li>The pointer itself can still be reassigned to point to another object.</li><li>What is constant is the value being point to, not the pointer address.</li></ul><p><strong>Syntax Forms</strong></p><ol><li><code>const DadaType* ptr = variableName;</code><br>or equivalently:<br><code>DataType const* ptr = variableName;</code><br>-&gt; Pointer to an constant object(object cannot be modified through <code>ptr</code>).</li><li><code>DataType* const ptr = variableName;</code><br>-&gt; Constant pointer (the pointer itself cannot be reassigned, but the object it points to can be modified).</li></ol><p><strong>Example</strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> temp = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* a = &amp;temp;</span><br><span class="line"><span class="type">int</span> <span class="type">const</span>* a = &amp;temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Modification:</span></span><br><span class="line">*a = <span class="number">9</span>;     <span class="comment">// ❌ Error: cannot modify a read-only object through this pointer</span></span><br><span class="line">temp = <span class="number">9</span>;   <span class="comment">// ✅ Valid: the variable itself is not declared const</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="2-Const-Pointer-T-const">2. Const Pointer (<code>T* const</code>)</h5><p><strong>Definition</strong><br>A <strong>const pointer</strong> means that pointer’s address is fixed once initialized – you cannot make it point to another location afterwards.<br>What is constant here is the pointer itself, not the data it points to.</p><p><strong>Key Property</strong></p><ul><li>The pointer must be initialized at the time of definition.</li><li>After initialization, you cannot reassign it to another address.</li><li>The object being pointed to remains mutable(unless it was declared <code>const</code> separately).</li><li><strong>Syntax</strong></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataType* <span class="type">const</span> pointerName = &amp;varaible;</span><br></pre></td></tr></tbody></table></figure><p><strong>Example</strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> temp = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> temp1 = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> p = &amp;temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Modification:</span></span><br><span class="line">p = &amp;temp1;  <span class="comment">// ❌ Error: p is a const pointer, cannot change its address</span></span><br><span class="line">*p = <span class="number">9</span>;      <span class="comment">// ✅ Valid: the pointee (temp) is still mutable</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Common C++ Interview Questions&lt;/h1&gt;
&lt;h2 id=&quot;C-Basics&quot;&gt;C++ Basics&lt;/h2&gt;
&lt;h3 id=&quot;Difference-Between-Pointers-and-References&quot;&gt;Difference Bet</summary>
      
    
    
    
    <category term="Interview" scheme="https://makewe1.github.io/categories/Interview/"/>
    
    
    <category term="C++" scheme="https://makewe1.github.io/tags/C/"/>
    
    <category term="interview" scheme="https://makewe1.github.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>Lec00 – Project Overview and Environment Setup</title>
    <link href="https://makewe1.github.io/2025/08/26/AstraKV/Lec00-ProjectSetupAndEnvironment/"/>
    <id>https://makewe1.github.io/2025/08/26/AstraKV/Lec00-ProjectSetupAndEnvironment/</id>
    <published>2025-08-26T11:50:00.000Z</published>
    <updated>2025-09-16T12:04:45.672Z</updated>
    
    <content type="html"><![CDATA[<h1>0. Project Overview</h1><h2 id="0-1-Project-Content">0.1 Project Content</h2><p>This project is a <strong>Key-Value (KV) storage engine</strong> built on the <strong>Log-Structured Merge-Tree (LSM Tree)</strong> architecture.<br>It is about:</p><ol><li>The fundamental principles of KV storage engines</li><li>Core concepts of LSM Tree, a widely used storage architecture</li><li>Common practices in modern C++ programming</li></ol><h1>1. Operating System and Compiler Environment</h1><p>The project is developed using <strong>modern C++ (up to C++17 standard)</strong>.<br>Any compiler that supports <strong>C++20 or later</strong> (such as <code>g++</code> or <code>clang++</code>) is fully compatible for building the system.</p><p>The development environment is based on <strong>Kali Linux</strong> running on WSL2. Since Kali and Ubuntu are both Debian-based distributions using the <code>apt</code> package manager, the installation instructions provided are directly applicable to Ubuntu or Debian systems as well.</p><h2 id="1-1-Compiler-Installation">1.1 Compiler Installation</h2><p>The project requires a modern C++ compiler. On Debian-based systems such as Ubuntu or Kali Linux, both GCC and G++ can be installed with the following commands:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y gcc</span><br><span class="line"><span class="built_in">sudo</span> apt install -y g++</span><br></pre></td></tr></tbody></table></figure><h2 id="1-2-Language-Server">1.2 Language Server</h2><p>To enhance the development experience, this project adopts <strong>clangd</strong> as the language server.<br>Clangd is a lightweight C/C++ language server that integrates seamlessly with modern editors such as VS Code. It provides:</p><ul><li>Intelligent code completion</li><li>Go-to-definition and symbol navigation</li><li>Real-time diagnostics and error highlighting</li><li>Semantic syntax highlighting</li></ul><p>On Debian-based systems, clangd can be installed with:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y clangd</span><br></pre></td></tr></tbody></table></figure><h1>2. Project Management Tools</h1><h2 id="2-1-Xmake">2.1 Xmake</h2><h3 id="2-1-1-Installation">2.1.1 Installation</h3><p>This project uses <strong>Xmake</strong> as its primary project management tool.<br>Xmake can be viewed as a combination of <strong>Make + CMake + vcpkg</strong>, providing functionality for:</p><ul><li>Project building</li><li>Dependency management</li><li>Execution and packaging</li></ul><p>Xmake can be installed with the following command:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://xmake.io/shget.text | bash</span><br></pre></td></tr></tbody></table></figure><p>For more details, refer to the official documentation:<a href="https://xmake.io/#/getting_started">Xmake – Getting Started</a></p><h1>3. VS Code Configuration</h1><h2 id="3-1-Code-Completion-and-Navigation">3.1 Code Completion and Navigation</h2><p>This project uses <strong>clangd</strong> as the language server.<br>After installing clangd on your system, the next step is to enable it in VS Code.</p><p>To do so, install the <strong>clangd extension</strong> from the VS Code marketplace.<br>This provides:</p><ul><li>Intelligent code completion</li><li>Go-to-definition and symbol navigation</li><li>Real-time diagnostics and error highlighting</li></ul><p><img src="clangd.png" alt="Xmake plugin in VS Code"></p><h2 id="3-2-Integrating-Xmake">3.2 Integrating Xmake</h2><p>In VSCode, the <strong>Xmake project management tool</strong> is supported. We can install the <strong>Xmake extension</strong>, which makes it more convenient to use Xmake for project management directly within VSCode.</p><p><img src="xmake.png" alt="Xmake plugin in VS Code"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;0. Project Overview&lt;/h1&gt;
&lt;h2 id=&quot;0-1-Project-Content&quot;&gt;0.1 Project Content&lt;/h2&gt;
&lt;p&gt;This project is a &lt;strong&gt;Key-Value (KV) storage engin</summary>
      
    
    
    
    <category term="AstraKV" scheme="https://makewe1.github.io/categories/AstraKV/"/>
    
    
    <category term="C++" scheme="https://makewe1.github.io/tags/C/"/>
    
    <category term="Database" scheme="https://makewe1.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Build a Blog from Scratch with Hexo and GitHub Pages</title>
    <link href="https://makewe1.github.io/2025/08/26/Guides/Building-a-Blog-with-GitHub-and-Hexo/"/>
    <id>https://makewe1.github.io/2025/08/26/Guides/Building-a-Blog-with-GitHub-and-Hexo/</id>
    <published>2025-08-26T11:50:00.000Z</published>
    <updated>2025-09-16T12:04:45.680Z</updated>
    
    <content type="html"><![CDATA[<p>Do you want to start your own blog for free?<br>In this tutorial, I’ll show you how to build a blog <strong>from scratch</strong> using <a href="https://hexo.io/">Hexo</a> (a fast, Node.js-based blogging framework) and deploy it to <strong>GitHub Pages</strong> for free hosting.</p><hr><h2 id="Step-0-Install-Node-js">Step 0: Install Node.js</h2><p>Check if Node.js and npm are installed:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></tbody></table></figure><p>If missing (or you want a specific version), install via NodeSource. Example for Node 22:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://deb.nodesource.com/setup_22.x | <span class="built_in">sudo</span> -E bash -</span><br><span class="line"><span class="built_in">sudo</span> apt install -y nodejs</span><br></pre></td></tr></tbody></table></figure><p>Verify installation:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Step-1-Install-Hexo-Create-Your-Blog">Step 1: Install Hexo &amp; Create Your Blog</h2><p>Install Hexo CLI globally:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> npm i -g hexo-cli</span><br></pre></td></tr></tbody></table></figure><p>Create a new blog project:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init my-blog</span><br><span class="line"><span class="built_in">cd</span> my-blog</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><p>Or use the current folder:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init .</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Step-2-Write-Your-First-Blog-Post">Step 2: Write Your First Blog Post</h2><p>Create a new post:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">"Hello World"</span></span><br></pre></td></tr></tbody></table></figure><p>Edit the generated file <code>source/_posts/hello-world.md</code>:</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2025-08-26 22:00:00</span><br><span class="line"><span class="section">tags: [Intro]</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">Welcome to my first Hexo blog post!   </span><br><span class="line">This is written in <span class="strong">**Markdown**</span>.</span><br></pre></td></tr></tbody></table></figure><p>Preview locally:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure><p>Visit: <a href="http://localhost:4000">http://localhost:4000</a></p><hr><h2 id="Step-3-Install-a-Theme">Step 3: Install a Theme</h2><p>Install the <strong>Next</strong> theme:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></tbody></table></figure><p>Edit <code>_config.yml</code>:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></tbody></table></figure><p>Restart:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Step-4-Deploy-to-GitHub-Pages">Step 4: Deploy to GitHub Pages</h2><p>Create a repo on GitHub (e.g. <code>my-blog</code>).<br>If your username is <code>yourname</code>:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://yourname.github.io/my-blog/</span><br></pre></td></tr></tbody></table></figure><p>Install deployer:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><p>Edit <code>_config.yml</code>:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/yourname/my-blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></tbody></table></figure><p>Deploy:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Step-5-Extra-Tweaks">Step 5: Extra Tweaks</h2><p>Apple-style fonts:</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">  <span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="string">"Helvetica Neue"</span>, Arial, sans-serif;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Custom domain: create <code>source/CNAME</code> with your domain name.</p><p>SEO &amp; Analytics: configure in theme <code>_config.yml</code>.</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Do you want to start your own blog for free?&lt;br&gt;
In this tutorial, I’ll show you how to build a blog &lt;strong&gt;from scratch&lt;/strong&gt; using </summary>
      
    
    
    
    <category term="Guides" scheme="https://makewe1.github.io/categories/Guides/"/>
    
    
    <category term="Hexo" scheme="https://makewe1.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
